1.postion: sticky;粘性定位元素（stickily positioned element）是计算后位置属性为 sticky 的元素
  使用条件
    1、父元素不能overflow:hidden或者overflow:auto属性。
    2、必须指定top、bottom、left、right4个值之一，否则只会处于相对定位
    3、父元素的高度不能低于sticky元素的高度
    4、sticky元素仅在其父元素内生效
2.react
    1.setSate书写的时候，可以直接穿一个带两个参数的函数，使得我们在重新修改state中值不用再定义变量来接收,直接和原来的值比较就可以了（每次的赋值会重新加载ui）
    2.props接收的值使用es6解构的方式来接收
      const { list,name  } = this.props
    3.定义的事件修改this指向的时候,不建议写在jsx中,而是写到 constructor里面
    4.ajax请求放在(componentDidMount)中,因为componentDidMount生命周期的话,打开只会渲染一次,这样会大大的提高了性能
    5.父子组件传值的时候,使用shouldComponentUpdate来判断父向子传的内容是否有变化,没变化的话,子组件就不需要渲染
 3.浏览器事件流
    DOM2级事件规定的事件流包括三个阶段：

    1、事件捕获阶段

    2、处于目标阶段

    3、事件冒泡阶段

    事件捕获阶段（Event Capturing）：
    按照事件捕获的思想，在此过程（click页面某元素）中，document对象会首先接收到click事件，然后事件沿着dom树依次向下，一直传播到实际目标，即div元素。但在事件流中的捕获阶段，实际目标div元素是不会接收到事件的，这就意味着没在捕获阶段，事件从document到再到后就停止了。（但IE9、Safari、Chrome、Firefox 和 Opera9.5 以及更高版本都会在捕获阶段触发事件对象上的事件）；下一个阶段是"处于目标"阶段，于是事件在发生，并在事件处理中被堪称冒泡阶段的一部分，最后，冒泡事件发生，事件又传播回文档。

    冒泡阶段（Event Bubbling）：
    事件开始时由最具体的元素（文档中嵌套层次最深的那个节点）接收，然后逐级向上传播到较为不具体的节点，即document对象。

    DOM2 与 DOM0区别

    DOM2级事件定义了两个方法，用于处理指定和删除事件处理程序的操作：

    ①.addEventListener()

    ②.removeEventListener()

    所有的DOM节点都包含这两个方法，而且接受三个参数：

    ①.要处理的事件名；

    ②.作为事件处理程序的函数；

    ③.一个 boolean 的值，如果值为true，表示在捕获阶段调用事件处理程序；如果是false，表示在冒泡阶段调用此事件处理程序。
4.事件委托原理：事件冒泡机制。
    优点：1.可以大量节省内存占用，减少事件注册。比如ul上代理所有li的click事件就很不错。
          2.可以实现当新增子对象时，无需再对其进行事件绑定，对于动态内容部分尤为合适
    缺点：事件代理的常用应用应该仅限于上述需求，如果把所有事件都用事件代理，可能会出现事件误判。即本不该被触发的事件被绑定上了事件。
6.call apply bind指的this是谁就是谁（bind不会调用，只会将当前的函数返回）
    fun.call(obj,a,b) 
    fun.apply(obj,[  ])
    fun.bind(obj,a,b)()
     1.以函数形式调用时，this永远都是window
     2.以方法的形式调用时，this是调用方法的对象
     3.以构造函数的形式调用时，this是新创建的那个对象
     4.使用call和apply调用时，this是指定的那个对象
     5.箭头函数：箭头函数的this看外层是否有函数           
        如果有，外层函数的this就是内部箭头函数的this            
        如果没有，就是window     
     6.特殊情况：通常意义上this指针指向为最后调用它的对象。这里需要注意的一点就是如果返回值是一个对象，那么this指向的就是那个返回的对象，如果返回值不是一个对象那么this还是指向函数的实例
 7.前端路由实现
     1.Pjax（PushState + Ajax）
        原理： 利用ajax请求替代a标签的默认跳转，然后利用html5的API修改url
        API:  history.pushState和 history.replaceState
        两个 API 都会操作浏览器的历史记录，而不会引起页面的刷新，pushState会增加一条新的历史记录，而replaceState则会替换当前的历史记录。（Ajax可以实现页面的无刷新操作，于是，返回的时候，通过URL或其他传参，我们就可以还原到Ajax之前的模样）
        浏览器的前进与后退，会触发window.onpopstate事件，通过绑定popstate事件，就可以根据当前URL地址中的查询内容让对应的菜单执行Ajax载入，实现Ajax的前进与后退效果。
        页面首次载入的时候，如果没有查询地址、或查询地址不匹配，则使用第一个菜单的Ajax地址的查询内容，并使用history.replaceState更改当前的浏览器历史，然后触发Ajax操作
     2.Hjax（Hash + Ajax）
        原理：url 中常会出现 #，一可以表示锚点（如回到顶部按钮的原理），二是路由里的锚点（hash）。Web 服务并不会解析 hash，也就是说 # 后的内容 Web 服务都会自动忽略，但是 JavaScript 是可以通过 window.location.hash 读取到的，读取到路径加以解析之后就可以响应不同路径的逻辑处理。
              hashchange 事件(监听 hash 变化触发的事件)，当用 window.location 处理哈希的改变时不会重新渲染页面，而是当作新页面加到历史记录中，这样我们跳转页面就可以在 hashchange 事件中注册 ajax 从而改变页面内容。
 8.解决vue路由跳转未匹配路径时出现空白页的问题
      1.导航守卫
        可以使用 router.beforeEach 注册一个全局前置守卫：
        const router = new VueRouter({ ... })
          router.beforeEach((to, from, next) => {
          // ...
          })
       2.匹配所有的路由
       3.重定向
9.react和vue 的数据变化方式
       1.在React以前我们可以使用componentWillReveiveProps来监听props的变换
       2.vue监听变量变化依靠的是watch
10.react-router：只更新变化的部分从而减少DOM性能消耗， a 跳转需要重新渲染
11.JS 异步已经告一段落了，这里来一波小总结
      1. 回调函数（callback）
      setTimeout(() => {
          // callback 函数体
      }, 1000)

      缺点：回调地狱，不能用 try catch 捕获错误，不能 return

      回调地狱的根本问题在于：

      缺乏顺序性： 回调地狱导致的调试困难，和大脑的思维方式不符
      嵌套函数存在耦合性，一旦有所改动，就会牵一发而动全身，即（控制反转）
      嵌套函数过多的多话，很难处理错误
      ajax('XXX1', () => {
          // callback 函数体
          ajax('XXX2', () => {
              // callback 函数体
              ajax('XXX3', () => {
                  // callback 函数体
              })
          })
      })

      优点：解决了同步的问题（只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行。）

      2. Promise
      Promise就是为了解决callback的问题而产生的。

      Promise 实现了链式调用，也就是说每次 then 后返回的都是一个全新 Promise，如果我们在 then 中 return ，return 的结果会被 Promise.resolve() 包装

      优点：解决了回调地狱的问题

      ajax('XXX1')
        .then(res => {
            // 操作逻辑
            return ajax('XXX2')
        }).then(res => {
            // 操作逻辑
            return ajax('XXX3')
        }).then(res => {
            // 操作逻辑
        })
      缺点：无法取消 Promise ，错误需要通过回调函数来捕获

      3. Generator
      特点：可以控制函数的执行，可以配合 co 函数库使用

      function *fetch() {
          yield ajax('XXX1', () => {})
          yield ajax('XXX2', () => {})
          yield ajax('XXX3', () => {})
      }
      let it = fetch()
      let result1 = it.next()
      let result2 = it.next()
      let result3 = it.next()
      4. Async/await
      async、await 是异步的终极解决方案

      优点是：代码清晰，不用像 Promise 写一大堆 then 链，处理了回调地狱的问题

      缺点：await 将异步代码改造成同步代码，如果多个异步操作没有依赖性而使用 await 会导致性能上的降低。

      async function test() {
        // 以下代码没有依赖性的话，完全可以使用 Promise.all 的方式
        // 如果有依赖性的话，其实就是解决回调地狱的例子了
        await fetch('XXX1')
        await fetch('XXX2')
        await fetch('XXX3')
      }
      下面来看一个使用 await 的例子：

      let a = 0
      let b = async () => {
        a = a + await 10
        console.log('2', a) // -> '2' 10
      }
      b()
      a++
      console.log('1', a) // -> '1' 1
      对于以上代码你可能会有疑惑，让我来解释下原因

      首先函数 b 先执行，在执行到 await 10 之前变量 a 还是 0，因为 await 内部实现了 generator ，generator 会保留堆栈中东西，所以这时候 a = 0 被保存了下来
      因为 await 是异步操作，后来的表达式不返回 Promise 的话，就会包装成 Promise.reslove(返回值)，然后会去执行函数外的同步代码
      同步代码执行完毕后开始执行异步代码，将保存下来的值拿出来使用，这时候 a = 0 + 10
      上述解释中提到了 await 内部实现了 generator，其实 await 就是 generator 加上 Promise的语法糖，且内部实现了自动执行 generator。如果你熟悉 co 的话，其实自己就可以实现这样的语法糖。
12.http协议报文
    1.请求报文(请求行/请求头/请求数据/空行)
        请求行
            求方法字段、URL字段和HTTP协议版本
            例如：GET /index.html HTTP/1.1
                get方法将数据拼接在url后面，传递参数受限
            请求方法：
                GET、POST、HEAD、PUT、DELETE、OPTIONS、TRACE、CONNECT
        请求头(key value形式)
            User-Agent：产生请求的浏览器类型。
            Accept：客户端可识别的内容类型列表。
            Host：主机地址
        请求数据
            post方法中，会把数据以key value形式发送请求
        空行
            发送回车符和换行符，通知服务器以下不再有请求头
    2.响应报文(状态行、消息报头、响应正文)
        状态行
        消息报头
        响应正文
13.Cookie的好处
    如果没有Cookie的存在，网络对于我们来说不会如此便捷。它存储着你的网站登录信息，如果没有他们，你将不能够登陆网站。网站通过Cookie信息来记忆以及辨认你的帐号，它可以记忆你的偏好设置。它还可以使网站提供个性化的内容，举个例子，如果你在淘宝上购物，淘宝可以记忆你所查看过的产品并据此来向你来推荐商品，即便你没有登陆个人帐号。
    Cookie的坏处
    伴随着互联网巨大商机的出现，Cookie也从一项服务性工具变成了一个可以带来巨大财富的工具。部分站点利用Cookie收集大量用户信息，并将这些信息转手卖给其他有商业目的的站点或组织，如网络广告商等，从中牟利。使用Cookie技术，您在浏览Web站点时，不论是否愿意，您的每一个X作都有可能被记录下来，在毫无防备的情况下，您正在浏览的网站地址、使用的计算机的软硬件配置，甚至您的名字、电子邮件地址都有可能被收集并转手出售。随着互联网的商业化发展，该问题越来越严重，个人隐私的泄露所带来的并不单纯是一些垃圾邮件，一旦个人资料被滥用，信用卡密码被盗，后果不堪设想。也正因为如此，有关Cookie的争论从未停止过，用户对Cookie的态度也是爱恨交加。
14.cookie和token都存放在header里面，为什么只劫持前者？
    因为传统的cookie保存的session id，服务器会根据这个session id，确保服务器与客户端对话；这是的cookie是有状态的，意味着验证记录或者会话需要一直在服务端和客户端保持。而token是无状态的，服务器不记录哪些用户登录了或者哪些 JWT 被发布了，只判断token是否有效，通常我们都会给token设置有效时间，来确保不被劫持。所有劫持cookie比劫持token，更有效，毕竟cookie在某种情况下可以一直使用下去，而token不行。
15.session与cookie的区别
    （1）Cookie以文本文件格式存储在浏览器中，而session存储在服务端它存储了限制数据量。它只允许4kb它没有在cookie中保存多个变量。

    （2）cookie的存储限制了数据量，只允许4KB，而session是无限量的

    （3）我们可以轻松访问cookie值但是我们无法轻松访问会话值，因此它更安全

    （4）设置cookie时间可以使cookie过期。但是使用session-destory（），我们将会销毁会话。

    总结：如果我们需要经常登录一个站点时，最好用cookie来保存信息，要不然每次登陆都特别麻烦，如果对于需要安全性高的站点以及控制数据的能力时需要用会话效果更佳，当然我们也可以结合两者，使网站按照我们的想法进行运行
16.primary
    唯一标识表中的所有行的一个列或一组列。主键不允许空值。不能存在具有相同的主键值的两个行，因此主键值总是唯一标识单个行。表中可以有不止一个键唯一标识行，每个键都称作候选键。只有一个候选键可以选作表的主键，所有其它候选键称作备用键。尽管表不要求具有主键，但定义主键是很好的做法。

    index 
    关系数据库中基于键值提供对表的行中数据的快速访问的数据库对象。索引还可以在表的行上强制唯一性。对表的主键自动进行索引。在全文检索中，全文索引存储关于重要词和这些词在给定列中的位置的信息。
17.webpack中loader和plugin的区别
    1）webpack的打包原理
      1.识别入口文件
      2.通过逐层识别模块依赖(Commonjs、amd或者es6的import，webpack都会对其进行分析，来获取代码的依赖)
      3.webpack做的就是分析代码，转换代码，编译代码，输出代码
      4.最终形成打包后的代码
    2）什么是loader
      1.loader是文件加载器，能够加载资源文件，并对这些文件进行一些处理，诸如编译、压缩等，最终一起打包到指定的文件中
      2.处理一个文件可以使用多个loader，loader的执行顺序和配置中的顺序是相反的，即最后一个loader最先执行，第一个loader最后执行
      3.第一个执行的loader接收源文件内容作为参数，其它loader接收前一个执行的loader的返回值作为参数，最后执行的loader会返回此模块的JavaScript源码
    3）什么是plugin
      在webpack运行的生命周期中会广播出许多事件，plugin可以监听这些事件，在合适的时机通过webpack提供的API改变输出结果。

      class MyPlugin{
          constructor(options){
              console.log("MyPlugin constructor:", options);
          }
          apply(compiler){
              compiler.plugin("compilation", compilation => {
                  console.log("MyPlugin");
              });
          }
      }
      module.exports = MyPlugin;
       
       
      webpack.config.js配置：
      module.exports = {
          ...
          plugins: [
              new MyPlugin({param: "my plugin"})
          ]

    4）loader和plugin的区别
      对于loader，它是一个转换器，将A文件进行编译形成B文件，这里操作的是文件，比如将A.scss转换为A.css，单纯的文件转换过程
      plugin是一个扩展器，它丰富了webpack本身，针对是loader结束后，webpack打包的整个过程，它并不直接操作文件，而是基于事件机制工作，会监听webpack打包过程中的某些节点，执行广泛的任务
      使用该plugin后，执行的顺序：
      webpack启动后，在读取配置的过程中会执行new MyPlugin(options)初始化一个MyPlugin获取其实例
      在初始化compiler对象后，就会通过compiler.plugin(事件名称，回调函数)监听到webpack广播出来的事件并且可以通过compiler对象去操作webpack
18.清除浮动
    1.额外标签法（在最后一个浮动标签后，新加一个标签，给其设置clear：both；）（不推荐）
    2.父级添加overflow属性（父元素添加overflow:hidden）（不推荐）
    3.使用after伪元素清除浮动（推荐使用）
      .clearfix:after{/*伪元素是行内元素 正常浏览器清除浮动方法*/
        content: "";
        display: block;
        height: 0;
        clear:both;
        visibility: hidden;
      }
      .clearfix{
          *zoom: 1;/*ie6清除浮动的方式 *号只有IE6-IE7执行，其他浏览器不执行*/
      }
   
      <body>
          <div class="fahter clearfix">
              <div class="big">big</div>
              <div class="small">small</div>
              <!--<div class="clear">额外标签法</div>-->
          </div>
          <div class="footer"></div>
      </body>
      优点：符合闭合浮动思想，结构语义化正确
      缺点：ie6-7不支持伪元素：after，使用zoom:1触发hasLayout.
    4.使用before和after双伪元素清除浮动
      .clearfix:after,.clearfix:before{
          content: "";
          display: table;
      }
      .clearfix:after{
          clear: both;
      }
      .clearfix{
          *zoom: 1;
      }
   
      <div class="fahter clearfix">
          <div class="big">big</div>
          <div class="small">small</div>
      </div>
      <div class="footer"></div>
      优点：代码更简洁
      缺点：用zoom:1触发hasLayout.
19.前端 输入URL到页面加载完成的过程
    URL结构 (协议,域名,路径,参数,哈希)

    http:// 协议

    www.baidu.com:80 // 域名+端口
    get_data // 路径
    parduct=1 // 参数
    (#)title // 哈希(锚点)



    DNS解析和缓存 (以google.com为例)

    根据google.com查找对应的IP地址,在查找过程中,浏览器先搜索自己的DNS缓存,其次搜索操作系统中的DNS缓存,在搜索操作系统中hosts文件,看有没有映射地址,在发送给LDNS(本地区域名服务器),LDNS将得到的IP地址返回给操作系统,同时自己将IP地址缓存起来,操作系统将IP地址返回给浏览器,同时自己也将IP地址缓存起来,自此,浏览器已经得到了域名对应的IP地址



    三次TCP握手 (建立连接通信)

    第一次握手,请求建立连接,客户端发送syn包到服务器,并进入SYN_SENT状态,等待服务器确认(您好,我想认识您)
    第二次握手,服务器收到syn包,必须确认客户的SYN,同时自己也发送一个SYN包,即SYN+ACK,服务器进入SYN_RECV状态 (好的,很高兴认识您)
    第三次握手,客户端收到服务器的SYN+SCK包,向服务器发送确认包ACK,自此,客户端和服务器进入ESTABLISHED(TCP连接成功),完成三次握手 (我也很高兴认识您)



    http请求

    完整的HTTP请求消息包含了: 一个请求行,请求消息报头以及请求正文
    具体的请求方法主要有GET,POST,PUT,DELETE,HEAD,OPTIONS,TRACE



    http响应

    完整的HTTP响应包含了: 状态行,响应消息报头以及响应正文
    其中常用的状态代码有,200,201,301,401,404,409,500等



    浏览器渲染

    浏览器会根据http响应来生成DOM树和CSSDOM树,这里就涉及到了两个主要知识点回流(Reflow)和重绘(Repaint)

    回流: 指元素的内容,结构,位置或尺寸发生了变化,需要重新计算样式和渲染树
    重绘: 指元素发生的改变只是影响了元素的一些外观之类的时候(背景色,边框颜色,文字颜色)



    四次挥手

    第一次挥手,浏览器发完数据后,发送FIN请求断开连接 (不早了,我该走了)
    第二次挥手,服务器发送ACK表示同意 (知道了)
    第三次挥手,服务器发送FIN (我也该走了)
    第四次挥手,浏览器需要返回ACK表示同意 (恩,好的)
20.tcp3次握手
    建立连接、传输数据、断开连接。

    建立TCP连接很简单，通过三次握手便可建立连接。
    建立好连接后，开始传输数据。TCP数据传输牵涉到的概念很多：超时重传、快速重传、流量控制、拥塞控制等等。
    断开连接的过程也很简单，通过四次握手完成断开连接的过程。
21.webpack是什么
    Webpack 是一个前端资源加载/打包工具。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。
    当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。
    以webpack.config.js为主要部分进行划分
    entry: 入口，定义整个编译过程的起点
    output: 输出，定义整个编译过程的终点
    module: 定义模块module的处理方式
    plugins：插件，对编译完成后的内容进行二度加工
    resolve.alias 定义模块的别名  
22.== 在表达式两边的数据类型不一致时,会隐式转换为相同数据类型,然后对值进行比较。
   === 不会进行类型转换,在比较时除了对值进行比较以外,还比较两边的数据类型。
   未定义的值和定义未赋值的为undefined，null是一种特殊的object,NaN是一种特殊的number。 
   undefined与null是相等；NaN与任何值都不相等，与自己也不相等。 
23.call、apply和bind的区别
    call调用 将方法中的this指向call中第一个参数，当第一个参数为null、undefined时，默认指向window; call中第一个参数之后是要传递给方法的参数列表。

    apply与call相似，不同之处在于传递给方法的参数形式不一致。apply传递给方法的参数是数组的形式。

    call和apply在改变方法的this指向时，会同时执行方法；而bind不会执行方法，而是返回改变this指向后的新方法。
24.es6 map 与 原生对象区别
    object和Map存储的都是键值对组合。但是：

    object的键的类型是 字符串；

    map的键的类型是 可以是任意类型；
    另外注意，object获取键值使用Object.keys（返回数组）；

    Map获取键值使用 map变量.keys() (返回迭代器)。
25.短暂性死区
    只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响
    ES6 明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。

    总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）。
    ES6 规定暂时性死区和let、const语句不出现变量提升，主要是为了减少运行时错误，防止在变量声明前就使用这个变量，从而导致意料之外的行为。这样的错误在 ES5 是很常见的，现在有了这种规定，避免此类错误就很容易了。

    总之，暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量
26.为啥要用虚拟DOM
    因为对DOM的直接操作是非常慢而且低效的。浏览器的渲染流程包括解析html以构建dom树->构建render树->布局render树->绘制render树，而每一次DOM改变从构建render树到布局到渲染都要重来
    而虚拟DOM的优势就是：1.开发者不再关心DOM而只关心数据，提升开发效率。2.保证最小化的DOM操作，使执行效率得到提升。
    实现虚拟DOM包含以下三个步骤
      1.用JavaScript模拟DOM树形成虚拟DOM树
      2.当组件状态发生更新时，比较新旧虚拟DOM树
      3.将差异应用到真正的DOM上