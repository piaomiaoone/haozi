                                                 NodeJS为什么支持高并发、非阻塞、
1.nodejs是非阻塞异步操作。
特点

1、Chrome V8引擎

2、事件驱动

3、非阻塞 I/O

4、单线程
如何处理“高并发”请求？

针对每个并发请求，服务端给请求注册一个激发事件（I/O），并给一个回调函数（这个过程没有阻塞新的连接请求）。

按顺序执行事件处理（I/O），处理完成后执行回调函数，接着执行下一个事件处理（I/O）。
事件处理（I/O）原理？

事件处理（即异步I/O处理）是由node工作线程去执行的（nodejs底层的libuv是由多线程的线程池并行I/O操作），且主线程是不需要等待返回的，只要发出指令后就可以执行其他事件，所有操作完成后执行回调。
NodeJS的优缺点

优点：

1、高并发；

2、适合I/O密集型应用。
缺点：

1、不适合CPU密集型应用，只支持单核CPU，不能充分利用CPU；

2、单进程，单线程，一旦代码某处出现bug，整个系统都崩溃；
如何解决CPU密集型？

原因，由于JavaScript单线程的原因，如果有长时间运行的计算（比如大循环），将会导致CPU时间片不能释放，使得后续I/O无法发起。

解决方案：分解大型运算任务为多个小任务，使得运算能够适时释放，不阻塞I/O调用的发起。
单进程、单线程解决方案

Nnigx反向代理，负载均衡，开多个进程，绑定多个端口；

开多个进程监听同一个端口，使用cluster模块。
